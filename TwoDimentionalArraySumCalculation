import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

/*Here we are try to calculate sum in hourClock fashion i.e

a b c
  d
e f g

*/

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));

        List<List<Integer>> arr = new ArrayList<>();

        IntStream.range(0, 6).forEach(i -> {
            try {
                arr.add(
                    Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                        .map(Integer::parseInt)
                        .collect(toList())
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });
        
        int max = Integer.MIN_VALUE;
        
        for(int i = 0 ; i < arr.size()-2 ; i++){
            for(int j = 0 ; j < arr.size()-2 ; j++){
                int sum = arr.get(i).subList(j, j+3).stream().mapToInt(Integer::intValue).sum();
//subList() helps in breaking the list into smaller parts
                sum += arr.get(i+1).get(j+1);
//we are trying to get only middle element in this row
                sum += arr.get(i+2).subList(j, j+3).stream().mapToInt(Integer::intValue).sum();
                
                if(sum > max){
                    max = sum;
                }
            }
        }
        
        System.out.println(max);

        bufferedReader.close();
    }
}
